// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Triton.Model.TritonStaging.External.RWS;
//
//    var rwsGetPodImage = RwsGetPodImage.FromJson(jsonString);

namespace Triton.Model.TritonStaging.External.RWS
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class RwsGetPodImage
    {
        [JsonProperty("data")]
        public RwsGetPodImageData Data { get; set; }
    }

    public partial class RwsGetPodImageData
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("waybill_id")]
        public long WaybillId { get; set; }

        [JsonProperty("size")]
        public long Size { get; set; }

        [JsonProperty("mime")]
        public string Mime { get; set; }

        [JsonProperty("type_id")]
        public long TypeId { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("file")]
        public File File { get; set; }
    }

    public partial class File
    {
        [JsonProperty("data")]
        public FileData Data { get; set; }
    }

    public partial class FileData
    {
        [JsonProperty("file")]
        public string File { get; set; }
    }

    public partial class RwsGetPodImage
    {
        public static RwsGetPodImage FromJson(string json) => JsonConvert.DeserializeObject<RwsGetPodImage>(json, Triton.Model.TritonStaging.External.RWS.Converter.Settings);
    }

    public static class RwsGetPodImageSerialize
    {
        public static string ToJson(this RwsGetPodImage self) => JsonConvert.SerializeObject(self, Triton.Model.TritonStaging.External.RWS.Converter.Settings);
    }

   
}
