// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Triton.Model.TritonStaging.External.RWS;
//
//    var rwsGetWaybillPods = RwsGetWaybillPods.FromJson(jsonString);

namespace Triton.Model.TritonStaging.External.RWS
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Collections.Generic;
    using System.Globalization;

    public partial class RwsGetWaybillPods
    {
        [JsonProperty("data")]
        public List<Datum> Data { get; set; }
    }

    public partial class Datum
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("waybill_id")]
        public long WaybillId { get; set; }

        [JsonProperty("size")]
        public long Size { get; set; }

        [JsonProperty("mime")]
        public string Mime { get; set; }

        [JsonProperty("type_id")]
        public long TypeId { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }
    }

    public partial class RwsGetWaybillPods
    {
        public static RwsGetWaybillPods FromJson(string json) => JsonConvert.DeserializeObject<RwsGetWaybillPods>(json, Triton.Model.TritonStaging.External.RWS.RwsGetWaybillPodsConverter.Settings);
    }

    public static class RwsGetWaybillPodsSerialize
    {
        public static string ToJson(this RwsGetWaybillPods self) => JsonConvert.SerializeObject(self, Triton.Model.TritonStaging.External.RWS.RwsGetWaybillPodsConverter.Settings);
    }

    internal static class RwsGetWaybillPodsConverter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
